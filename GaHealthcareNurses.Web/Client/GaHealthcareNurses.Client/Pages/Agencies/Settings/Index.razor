@layout GaHealthcareNurses.Client.Shared.AgencyLayout
@page "/agency/settings"
@using GaHealthcareNurses.Client.Data.ViewModels;
@inject GaHealthcareNurses.Client.NewFolder.WebServicePath wsp
@inject HttpClient Http
@inject IMapper _mapper
@using GaHealthcareNurses.Entity.ViewModels
@using GaHealthcareNurses.Entity.Models
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Hosting
@inject IWebHostEnvironment env
@using Newtonsoft.Json
@inject IToastService toastService
@inject NavigationManager navigation
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Spinner
@inject Blazored.LocalStorage.ILocalStorageService localStorage

<div class="frontend default-padding">
    <div class="login_sec">
        <div class="center_login">
            <div class="row">
                <div class="col-md-8 col-md-offset-2">
                    <div class="site-heading text-center">
                        <h2 data-aos="fade-up">Profile</h2>
                    </div>
                </div>
            </div>
            <div class="login_box">
                <div class="inner_box">

                    <EditForm Model="@updateViewModel" class="formSec" OnValidSubmit="() => UpdateAgency(updateViewModel)">
                        <DataAnnotationsValidator />
                        <div class="inputFiled form-group">
                            <SfTextBox Placeholder="Agency Name" FloatLabelType="@FloatLabelType.Auto" Type="InputType.Text" class="form-control" @bind-Value="@updateViewModel.Name" />
                            <ValidationMessage For="@(() => updateViewModel.Name)" />
                        </div>
                        <div class="inputFiled form-group">
                            <SfTextBox Placeholder="Address Line 1" FloatLabelType="@FloatLabelType.Auto" Type="InputType.Text" class="form-control" @bind-Value="@updateViewModel.AddressLine1" />
                            <ValidationMessage For="@(() => updateViewModel.AddressLine1)" />
                        </div>
                        <div class="inputFiled form-group">
                            <SfTextBox Placeholder="Address Line 2" FloatLabelType="@FloatLabelType.Auto" Type="InputType.Text" class="form-control" @bind-Value="@updateViewModel.AddressLine2" />
                        </div>
                        <div class="inputFiled form-group brow_fl">
                            <SfDropDownList class="form-control" FloatLabelType="@FloatLabelType.Auto" @bind-Value="updateViewModel.StateId" TValue="int" TItem="State" Placeholder="State" AllowFiltering="true" DataSource="@stateList">
                                <DropDownListEvents TItem="State" TValue="int" ValueChange="OnStateChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="Name" Value="StateId"></DropDownListFieldSettings>
                            </SfDropDownList>
                            <ValidationMessage For="@(() => updateViewModel.StateId)" />
                        </div>
                        <div class="inputFiled form-group brow_fl">
                            <SfDropDownList class="form-control" FloatLabelType="@FloatLabelType.Auto" @bind-Value="updateViewModel.CityId" TValue="int" TItem="City" Placeholder="Select a city" AllowFiltering="true" DataSource="@cityList">
                                <DropDownListEvents TItem="City" TValue="int" ValueChange="OnCityChange"></DropDownListEvents>
                                <DropDownListFieldSettings Text="NameAndZipcode" Value="CityId"></DropDownListFieldSettings>
                            </SfDropDownList>
                            <ValidationMessage For="@(() => updateViewModel.CityId)" />
                        </div>
                        <div class="inputFiled form-group brow_fl">
                            <SfTextBox Placeholder="Zip Code" FloatLabelType="@FloatLabelType.Auto" Type="InputType.Text" disabled @bind-Value="updateViewModel.ZipCode" class="form-control" />
                            <ValidationMessage For="@(() => updateViewModel.ZipCode)" />
                        </div>
                        <div class="inputFiled form-group brow_fl">
                            <SfMultiSelect FloatLabelType="@FloatLabelType.Auto" @bind-Value="updateViewModel.ServedCounties" TValue="List<int>" TItem="County" AllowFiltering="true" Placeholder="Select Counties Served" Mode="@VisualMode.Box" DataSource="@countiesList" FilterBarPlaceholder="Search County">
                                <MultiSelectFieldSettings Text="CountyName" Value="Id"></MultiSelectFieldSettings>
                            </SfMultiSelect>
                            <ValidationMessage For="@(() => updateViewModel.ServedCounties)" />
                        </div>
                        <div class="inputFiled form-group">
                            <SfMaskedTextBox FloatLabelType="@FloatLabelType.Auto" Placeholder="Phone No" @bind-Value="updateViewModel.TelephoneNo" Mask="000-000-0000" class="form-control" />
                            <ValidationMessage For="@(() => updateViewModel.TelephoneNo)" />
                        </div>
                        <div class="inputFiled form-group">
                            <SfTextBox Placeholder="Website Link" FloatLabelType="@FloatLabelType.Auto" Type="InputType.Text" class="form-control" @bind-Value="updateViewModel.AgencyWebsite" />
                        </div>
                        <div class="inputFiled form-group">
                            <SfTextBox Placeholder="Email" FloatLabelType="@FloatLabelType.Auto" Type="InputType.Text" class="form-control" @bind-Value="@updateViewModel.EmailAddress" />
                            <ValidationMessage For="@(() => updateViewModel.EmailAddress)" />
                        </div>
                        <label class="label_dob">Logo</label>
                        <div class="inputFiled form-group">
                            <InputFile class="form-control" type="file"
                                       FilterByExtension="true"
                                       FileTooLargeMessage="File is too large to upload"
                                       AllowedExtensions=".jpeg;.jpg;.png;"
                                       OnChange="HandleSelection" />
                        </div>
                        <fieldset class="fieldset_box">
                            <legend>How many Nurses do you have registered with you?</legend>
                            <div class="row">
                                <div class="col-md-3">
                                    <label>LPNs</label>
                                    <SfNumericTextBox Min="0" FloatLabelType="@FloatLabelType.Auto" @bind-Value="updateViewModel.LPNs" />
                                </div>
                                <div class="col-md-3">
                                    <label>RNs</label>
                                    <SfNumericTextBox Min="0" FloatLabelType="@FloatLabelType.Auto" @bind-Value="updateViewModel.RNs" />
                                </div>
                                <div class="col-md-3">
                                    <label>CNAs</label>
                                    <SfNumericTextBox Min="0" FloatLabelType="@FloatLabelType.Auto" @bind-Value="updateViewModel.CNAs" />
                                </div>
                                <div class="col-md-3">
                                    <label>PCAs</label>
                                    <SfNumericTextBox Min="0" FloatLabelType="@FloatLabelType.Auto" @bind-Value="updateViewModel.PCAs" />
                                </div>
                            </div>
                        </fieldset>
                        <button type="submit" name="submit" class="create_account btn-theme border ">
                            Update Account <i class="fa fa-paper-plane"></i>
                        </button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

<SfSpinner Size="40" Type="SpinnerType.Bootstrap4" @bind-Visible="isLoading"></SfSpinner>

@code{
    List<FileData> fileData = new List<FileData>();
    EmployerUpdateViewModel updateViewModel = new EmployerUpdateViewModel();
    private List<State> stateList = new List<State>();
    [Parameter] public EventCallback OnValidSubmit { get; set; }
    private int stateId = 0;
    private List<City> cityList = new List<City>();
    List<County> countiesList = new List<County>();
    InputMask mask { get; set; }
    Employer employer = new Employer();
    [Inject]
    protected IJSRuntime JsRuntime { get; set; }
    LoginViewModel<UserDetails> agencyData = new LoginViewModel<UserDetails>();
    Employer agencyInformation = new Employer();
    bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        var responseMessage = await Http.GetAsync(wsp.Path + "State");
        var response = responseMessage.Content.ReadAsStringAsync().Result;
        stateList = (JsonConvert.DeserializeObject<Response<List<State>>>(response)).Data;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            agencyData = await localStorage.GetItemAsync<LoginViewModel<UserDetails>>("agencyData");
            if (agencyData != null)
            {
                isLoading = true;
                var agencyResponseMessage = await Http.GetAsync(wsp.Path + $"Employer/GetById?id={agencyData.UserDetails.UserId}");
                var agencyResponse = agencyResponseMessage.Content.ReadAsStringAsync().Result;
                agencyInformation = (JsonConvert.DeserializeObject<Response<Employer>>(agencyResponse)).Data;

                updateViewModel = _mapper.Map<EmployerUpdateViewModel>(agencyInformation);

                var agencyCountiesResponseMessage = await Http.GetAsync(wsp.Path + $"Employer/GetAgencyServedCounties?employerId={agencyData.UserDetails.UserId}");
                var agencyCountiesResponse = agencyCountiesResponseMessage.Content.ReadAsStringAsync().Result;
                var agencyServedCountiesList = (JsonConvert.DeserializeObject<Response<List<AgencyServedCounties>>>(agencyCountiesResponse)).Data;

                if (agencyServedCountiesList.Count > 0)
                    updateViewModel.ServedCounties = agencyServedCountiesList.Select(x => x.CountyId).ToList();

                var httpResponseMessage = await Http.GetAsync(wsp.Path + $"City/GetByStateId?stateId={updateViewModel.StateId}");
                var responseCity = httpResponseMessage.Content.ReadAsStringAsync().Result;
                cityList = (JsonConvert.DeserializeObject<Response<List<City>>>(responseCity)).Data;

                await LoadCounties(updateViewModel.StateId);
                isLoading = false;
                StateHasChanged();
            }
            else
            {
                navigation.NavigateTo("agency/sign-in");

            }
        }
    }

    public async Task UpdateAgency(EmployerUpdateViewModel update)
    {
        try
        {
            using (var client = new HttpClient())
            {
                isLoading = true;
                var file = update.Logo;
                client.BaseAddress = new Uri(wsp.Path + "Register/Agency");
                byte[] data;
                MultipartFormDataContent multiContent = new MultipartFormDataContent();
                multiContent.Add(new StringContent(update.EmployerId), "EmployerId");
                multiContent.Add(new StringContent(update.Name), "Name");
                multiContent.Add(new StringContent(update.AddressLine1), "AddressLine1");
                if (update.AddressLine2 != null)
                {
                    multiContent.Add(new StringContent(update.AddressLine2), "AddressLine2");
                }
                multiContent.Add(new StringContent(update.StateId.ToString()), "StateId");
                multiContent.Add(new StringContent(update.CityId.ToString()), "CityId");
                multiContent.Add(new StringContent(update.ZipCode), "ZipCode");
                multiContent.Add(new StringContent(update.TelephoneNo), "TelephoneNo");
                multiContent.Add(new StringContent(update.LPNs.ToString()), "LPNs");
                multiContent.Add(new StringContent(update.PCAs.ToString()), "PCAs");
                multiContent.Add(new StringContent(update.RNs.ToString()), "RNs");
                multiContent.Add(new StringContent(update.CNAs.ToString()), "CNAs");
                if (update.AgencyWebsite != null)
                {
                    multiContent.Add(new StringContent(update.AgencyWebsite), "AgencyWebsite");
                }
                multiContent.Add(new StringContent(update.EmailAddress), "EmailAddress");
                if (update.ServedCounties != null && update.ServedCounties.Count > 0)
                {
                    multiContent.Add(new StringContent(string.Join(",", update.ServedCounties.Select(x => x))), "ServedCounties");
                }
                if (update.FileName != null)
                    multiContent.Add(new ByteArrayContent(update.LogoData), "Logo", update.FileName);
                else
                    multiContent.Add(new ByteArrayContent(new byte[0]), "Logo");
                var responseMessage = await client.PostAsync(wsp.Path + "Employer/Update", multiContent);
                var response = responseMessage.Content.ReadAsStringAsync().Result;
                var result = (JsonConvert.DeserializeObject<Response<Employer>>(response));
                if (result.Data != null)
                {
                    toastService.ShowSuccess("Account Updated Successfully!");
                }
                else
                {
                    toastService.ShowError(result.Message);
                }
                isLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
            isLoading = false;
            StateHasChanged();
        }

    }

    private async Task LoadCities(int stateId)
    {
        var responseMessage = await Http.GetAsync(wsp.Path + $"City/GetByStateId?stateId={stateId}");
        var response = responseMessage.Content.ReadAsStringAsync().Result;
        cityList = (JsonConvert.DeserializeObject<Response<List<City>>>(response)).Data;
    }

    private async Task LoadCounties(int stateId)
    {
        var responseMessage = await Http.GetAsync(wsp.Path + $"State/GetCountiesByStateId?stateId={stateId}");
        var response = responseMessage.Content.ReadAsStringAsync().Result;
        countiesList = (JsonConvert.DeserializeObject<Response<List<County>>>(response)).Data;
    }

    public void OnFileRemove(RemovingEventArgs args)
    {
        args.PostRawFile = false;
    }

    private async void HandleSelection(InputFileChangeEventArgs eventArgs)
    {
        List<string> imgUrls = new List<string>();
        List<FileData> fileData = new List<FileData>();
        var imgFile = eventArgs.File;
        if (imgFile.ContentType.ToLower().Contains("jpeg") || imgFile.ContentType.ToLower().Contains("jpg") || imgFile.ContentType.ToLower().Contains("png"))
        {
            var format = imgFile.ContentType.ToLower().Contains("jpeg") ? "image/jpeg" : (imgFile.ContentType.ToLower().Contains("jpg")) ? "image/jpg" : "image/png";
            var resizedImageFile = await imgFile.RequestImageFileAsync(format,
               100, 100);
            var buffers = new byte[resizedImageFile.Size];
            await resizedImageFile.OpenReadStream().ReadAsync(buffers);
            var fileEx = resizedImageFile.ContentType.ToLower().Contains("png") ? "png" : "jpg";
            updateViewModel.LogoData = buffers;
            updateViewModel.FileName = $"{Guid.NewGuid()}.{fileEx}";
        }
        else
        {
            await JsRuntime.InvokeVoidAsync("onResetFile");
            toastService.ShowError("Accept only jpg, jpeg or png file.");
        }
    }

    public async Task OnStateChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, State> args)
    {
        updateViewModel.StateId = args.ItemData.StateId;
        stateId = args.ItemData.StateId;

        if (stateId == 0)
        {
            cityList.Clear();
            countiesList.Clear();
        }
        else
        {
            await LoadCities(stateId);
            await LoadCounties(stateId);
        }
    }

    public async Task OnCityChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<int, City> args)
    {
        if (args.ItemData != null)
        {
            updateViewModel.CityId = args.ItemData.CityId;
            var responseMessage = await Http.GetAsync(wsp.Path + $"City/GetById?id={updateViewModel.CityId}");
            var response = responseMessage.Content.ReadAsStringAsync().Result;
            City city = (JsonConvert.DeserializeObject<Response<City>>(response)).Data;
            updateViewModel.ZipCode = city.ZipCode.ToString();
        }
    }
}
