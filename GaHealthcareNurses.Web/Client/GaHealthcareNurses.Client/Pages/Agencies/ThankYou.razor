@layout GaHealthcareNurses.Client.Shared.SecondaryLayout
@page "/agency/thank_you"
@inject IToastService toastService
@inject HttpClient Http
@inject GaHealthcareNurses.Client.NewFolder.WebServicePath wsp
@using Newtonsoft.Json;
@inject NavigationManager navigation
@using GaHealthcareNurses.Entity.ViewModels
@using GaHealthcareNurses.Entity.Models
@using GaHealthcareNurses.Client.Data.ViewModels;
@inject IToastService toastService
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using Microsoft.AspNetCore.WebUtilities
@using System.Net.Http.Headers
@inject IJSRuntime jsRunTime

<GaHealthcareNurses.Client.Shared.AgencyHeader />
<section class="sucess_sms">
    <div class="container">
        <div class="thankYou_contant">
            <div class="thankYou_img">
                <img class="w-100" src="assets/img/thanks.png" />
            </div>
            <h2 class="h2">For Subscribe!</h2>
        </div>
    </div>
</section>
<GaHealthcareNurses.Client.Shared.FormFooter />

@code {

    System.Uri uri;
    string subsciptionId = string.Empty;
    LoginViewModel<UserDetails> agencyData = new LoginViewModel<UserDetails>();
    PaypalAccessTokenResponseModel paypalAccessToken = new PaypalAccessTokenResponseModel();

    protected override async Task OnInitializedAsync()
    {
        uri = navigation.ToAbsoluteUri(navigation.Uri);

        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("subscription_id", out var aVal))
        {
            subsciptionId = aVal;
        }

        var bodyContent = new List<KeyValuePair<string, string>>();
        bodyContent.Add(new KeyValuePair<string, string>("grant_type", "client_credentials"));

        // create request object
        var request = new HttpRequestMessage(HttpMethod.Post, "https://api-m.sandbox.paypal.com/v1/oauth2/token") { Content = new FormUrlEncodedContent(bodyContent) };

        // add authorization header
        request.Headers.Authorization = new AuthenticationHeaderValue("Basic", "QVpGdTdQcnl0VzRCeDY0ZTNfSWxyd2Y1WlJWLWxmRGxMYWlaZnZlODBfQlEwbGs0dDRpS2gtSzRvc2NxVWt3Tl9aNERLMk1Od2VRV1EwS3Y6RU5aMWt6RFFtR3lUTzZUcDNaZGFNT3lSNWVHTVh5aGx2bWU0NWhXckkyeF9KRnBwbXBKZENfRXlzUUp1dTdIbU05eUttNHZHUndIdVdEVHg=");

        // send request
        using var httpResponse = await Http.SendAsync(request);

        // convert http response data to UsersResponse object
        var response = httpResponse.Content.ReadAsStringAsync().Result;
        paypalAccessToken = (JsonConvert.DeserializeObject<PaypalAccessTokenResponseModel>(response));

        using (var client = new HttpClient())
        {

            var accessToken = paypalAccessToken.Access_token;
            client.DefaultRequestHeaders.Add("Authorization", "Bearer " + accessToken);
            var httpResponseMessage = await client.GetAsync($"https://api-m.sandbox.paypal.com/v1/billing/subscriptions/{subsciptionId}");
            var apiResponse = httpResponseMessage.Content.ReadAsStringAsync().Result;
            var result = (JsonConvert.DeserializeObject<SubscrpitionDetailsViewModel>(apiResponse));

            UpdateSubscriptionViewModel updateSubscriptionViewModel = new UpdateSubscriptionViewModel
            {
                SubscriptionId = subsciptionId,
                Status = result.status
            };

            var responseMessage = await Http.PostAsJsonAsync(wsp.Path + "Order/UpdateSubscription", updateSubscriptionViewModel);
            var subscriptionResponse = responseMessage.Content.ReadAsStringAsync().Result;
            var data = (JsonConvert.DeserializeObject<Response<string>>(subscriptionResponse));
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            agencyData = await localStorage.GetItemAsync<LoginViewModel<UserDetails>>("agencyData");
        }
        StateHasChanged();
    }
}
