// <auto-generated />
using System;
using GaHealthcareNurses.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GaHealthcareNurses.DbMigration.Migrations
{
    [DbContext(typeof(GaHealthcareNursesContext))]
    [Migration("20220829154610_AddedAgencyWebsiteLink")]
    partial class AddedAgencyWebsiteLink
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.AgencyServedCounties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.HasIndex("EmployerId");

                    b.ToTable("AgencyServedCounties");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.AgencyTaskList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TaskListTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("TaskListTemplateId");

                    b.ToTable("AgencyTaskList");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.BuyCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PurchasedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NurseId");

                    b.ToTable("BuyCourses");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareCoordinationNote", b =>
                {
                    b.Property<int>("CareCoordinationNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Aide")
                        .HasColumnType("bit");

                    b.Property<int?>("CareRecipientId")
                        .HasColumnType("int");

                    b.Property<bool>("CaseManager")
                        .HasColumnType("bit");

                    b.Property<bool>("CommunityResource")
                        .HasColumnType("bit");

                    b.Property<string>("Discussion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DmeVendor")
                        .HasColumnType("bit");

                    b.Property<bool>("Don")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<bool>("MSW")
                        .HasColumnType("bit");

                    b.Property<bool>("OT_COTA")
                        .HasColumnType("bit");

                    b.Property<bool>("Other")
                        .HasColumnType("bit");

                    b.Property<bool>("PT_PTA")
                        .HasColumnType("bit");

                    b.Property<bool>("Pharmacist")
                        .HasColumnType("bit");

                    b.Property<bool>("Physician")
                        .HasColumnType("bit");

                    b.Property<bool>("RN_LPN_LVN")
                        .HasColumnType("bit");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SLP")
                        .HasColumnType("bit");

                    b.Property<bool>("TherapySupervisor")
                        .HasColumnType("bit");

                    b.HasKey("CareCoordinationNoteId");

                    b.HasIndex("CareRecipientId");

                    b.ToTable("CareCoordinationNote");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipient", b =>
                {
                    b.Property<int>("CareRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("Alert")
                        .HasColumnType("bit");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CareRecipientLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("CareRecipientRelationshipId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Forgetful")
                        .HasColumnType("bit");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionalLimitation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenderPreference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsResponsiblePartySameAsCareRecipient")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleInitial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoreInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteToCaregiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Receptiveness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyTelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceListId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("TotalHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhenToStart")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CareRecipientId");

                    b.HasIndex("CareRecipientLocationId");

                    b.HasIndex("CareRecipientRelationshipId");

                    b.HasIndex("CityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceListId");

                    b.HasIndex("StateId");

                    b.ToTable("CareRecipient");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipientLocation", b =>
                {
                    b.Property<int>("CareRecipientLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CurrentLocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CareRecipientLocationId");

                    b.ToTable("CareRecipientLocation");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipientRelationship", b =>
                {
                    b.Property<int>("CareRecipientRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CareRecipientRelationshipId");

                    b.ToTable("CareRecipientRelationship");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AdditionInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CertificationId");

                    b.HasIndex("NurseId");

                    b.HasIndex("StateId");

                    b.ToTable("Certification");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountyId");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BestTimeToCal")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CareRecipientRelationshipId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HowYouHeardAboutUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleInitial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferralName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CareRecipientRelationshipId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CountyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CountyPopulation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("County");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AttendedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AttendedTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompleteAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EducationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OtherQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializedTraining")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationId");

                    b.HasIndex("EducationTypeId");

                    b.HasIndex("NurseId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.EducationType", b =>
                {
                    b.Property<int>("EducationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationTypeId");

                    b.ToTable("EducationType");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Employer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgencyWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubscriptionActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubscriptionRecurring")
                        .HasColumnType("bit");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<string>("TelephoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Employer");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.HiringAgreements", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("AbuseNeglectAndExploitationPolicy")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcknowledgementOfPoliciesAndProcedures")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlreadyHapititisBSeriesDone")
                        .HasColumnType("bit");

                    b.Property<bool?>("ClientCareInEmergency")
                        .HasColumnType("bit");

                    b.Property<bool?>("CnaAndPcaDutiesAndResponsibilities")
                        .HasColumnType("bit");

                    b.Property<bool?>("CodeOfEthics")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CommissionExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ConfidientiallyStatement")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CredibleEvidenceFillingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("CredibleEvidenceOfAbuseStatement")
                        .HasColumnType("bit");

                    b.Property<bool?>("DeclinationOfInfluenzaVaccination")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeclinationOfInfluenzaVaccinationFillingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DocumentationOfTrainingAndOrientation")
                        .HasColumnType("bit");

                    b.Property<bool?>("FireOrSafetyProcedure")
                        .HasColumnType("bit");

                    b.Property<bool?>("GahRegulations")
                        .HasColumnType("bit");

                    b.Property<bool?>("HepatitisBSeries")
                        .HasColumnType("bit");

                    b.Property<bool?>("JobDescription")
                        .HasColumnType("bit");

                    b.Property<string>("NotaryPublic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PartnershipForHealth")
                        .HasColumnType("bit");

                    b.Property<bool?>("RefusedToTakeHepatitisBSeriesInPast")
                        .HasColumnType("bit");

                    b.Property<bool?>("WantToHaveHepatitisBSeries")
                        .HasColumnType("bit");

                    b.Property<string>("Witness")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HiringAgreements");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CareRecipientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientPaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ClientRatingToAgency")
                        .HasColumnType("float");

                    b.Property<double?>("ClientRatingToNurse")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("HourlyRate")
                        .HasColumnType("float");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<bool>("SentToNurse")
                        .HasColumnType("bit");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.HasIndex("CareRecipientId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.JobApply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AcceptJobDescriptionAndPolicies")
                        .HasColumnType("bit");

                    b.Property<bool>("CNACanBeShared")
                        .HasColumnType("bit");

                    b.Property<bool>("CPRCanBeShared")
                        .HasColumnType("bit");

                    b.Property<string>("ClientFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ClientRating")
                        .HasColumnType("float");

                    b.Property<bool>("DocumentsCanBeShared")
                        .HasColumnType("bit");

                    b.Property<bool>("DrivingLicenseCanBeShare")
                        .HasColumnType("bit");

                    b.Property<bool>("G4CanBeShared")
                        .HasColumnType("bit");

                    b.Property<bool>("HiringDisclosuresCanBeShared")
                        .HasColumnType("bit");

                    b.Property<bool>("HiringPreScreeningCanBeShared")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("NurseFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("NurseRating")
                        .HasColumnType("float");

                    b.Property<string>("OfferedRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefferedRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefferedRateUpto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RequiredHours")
                        .HasColumnType("float");

                    b.Property<bool>("SSNCanBeShared")
                        .HasColumnType("bit");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<bool>("TBResultsCanBeShared")
                        .HasColumnType("bit");

                    b.Property<bool>("W4CanBeShared")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.HasIndex("StatusId");

                    b.ToTable("JobApply");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.JobApplyForAgency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("OfferedRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefferedRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("StatusId");

                    b.ToTable("JobApplyForAgency");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobTitleId");

                    b.ToTable("JobTitle");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Nurse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AgreeToApplicantStatement")
                        .HasColumnType("bit");

                    b.Property<bool?>("AgreeToNonDiscriminationDocument")
                        .HasColumnType("bit");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("AvailableHoursPerWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailableToWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<bool?>("ContactPresentEmployer")
                        .HasColumnType("bit");

                    b.Property<string>("ContactTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("CriminalActivity")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateAvailableToWork")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HoursPerWeek")
                        .HasColumnType("int");

                    b.Property<bool?>("IneligibleForParticipation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserAvailableForJob")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("LawfullyBecomingEmployed")
                        .HasColumnType("bit");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleInitial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredHourlyRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredHourlyRateUpto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfliePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForIneligible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferralCount")
                        .HasColumnType("int");

                    b.Property<int?>("RegisteredCount")
                        .HasColumnType("int");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialSecurityNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StepsInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalRewards")
                        .HasColumnType("int");

                    b.Property<bool?>("Trasnportation")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NurseCnaSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccurateMaintainIntakeAndOutputAndDocuments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdaptCareToIncorporateNormalGrowthAndDevelopment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdaptMethodAndTerminologyOfPatients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdministersEnemasInstructedBySupervisingNurse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Alzheimers")
                        .HasColumnType("float");

                    b.Property<string>("AmbulanceAssistance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssistPatientPerformingTurnCoughAndDeepBreathingExercises")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssistWithMealsAndSnacks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AssistedLiving")
                        .HasColumnType("float");

                    b.Property<string>("BackRubs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Baths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodPressureMeasurements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Cancer")
                        .HasColumnType("float");

                    b.Property<string>("CnaSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Dementia")
                        .HasColumnType("float");

                    b.Property<double?>("Diabetes")
                        .HasColumnType("float");

                    b.Property<string>("DistinguishesMeasurementReportedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnsureSafeEnvironmentReflectingSpecificNeeds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedingTubesWithScopeOfCnaCertification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedsPatientWithNormalSwallowingAbilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("HomeCare")
                        .HasColumnType("float");

                    b.Property<double?>("Hospice")
                        .HasColumnType("float");

                    b.Property<string>("MeasureHeightAndWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Medical")
                        .HasColumnType("float");

                    b.Property<string>("NailCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("NursingHome")
                        .HasColumnType("float");

                    b.Property<string>("OralAndNascalCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OralCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Parkinsons")
                        .HasColumnType("float");

                    b.Property<string>("Positioning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeOxygenSafety")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProperBodyMechanics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProperUseOfHoyerLifts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProperUseOfSpecialtyBeds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineCatheterCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineSkinCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shampoo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Surgical")
                        .HasColumnType("float");

                    b.Property<string>("TemperaturePulseAndRespirationMeasurements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferFromBedToChair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferFromChairToBed")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NurseId");

                    b.ToTable("NurseCnaSkills");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NurseComment", b =>
                {
                    b.Property<int>("NurseCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AgencyResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("NurseCommentId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("NurseComment");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Reference", b =>
                {
                    b.Property<int>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReferenceId");

                    b.HasIndex("NurseId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Referral", b =>
                {
                    b.Property<int>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DateReferred")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferralLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReferralId");

                    b.HasIndex("NurseId");

                    b.ToTable("Referral");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.ServiceList", b =>
                {
                    b.Property<int>("ServiceListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceListId");

                    b.ToTable("ServiceList");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("SubscriptionLevel")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskList", b =>
                {
                    b.Property<int>("TaskListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TaskStatus")
                        .HasColumnType("bit");

                    b.Property<string>("TotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitNoteId")
                        .HasColumnType("int");

                    b.HasKey("TaskListId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.HasIndex("VisitNoteId");

                    b.ToTable("TaskList");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskListCategory", b =>
                {
                    b.Property<int>("TaskListCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskListCategoryId");

                    b.ToTable("TaskListCategory");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskListTemplate", b =>
                {
                    b.Property<int>("TaskListTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskListCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskListTemplateId");

                    b.HasIndex("TaskListCategoryId");

                    b.ToTable("TaskListTemplate");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskListVerification", b =>
                {
                    b.Property<int>("TaskListVerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NurseSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TaskVerifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskListVerificationId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("TaskListVerification");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.UploadDocuments", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BackgroundCheckExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CnaExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CnaOrProfessionalLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CprExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CprProvideNewLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DrivingLicenseExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EVerifyWillPulled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EVerifyWillPulledExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HiringDisclosures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HiringDisclosuresExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HiringPreScreening")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HiringPreScreeningExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficeWillPulled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OfficeWillPulledExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PcaTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PcaTestExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SexOffenderReportOfficeWillPulled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SexOffenderReportOfficeWillPulledExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ssn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SsnExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StaffPortalExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StaffPortalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TbTestResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TbTestResultsExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.VisitNote", b =>
                {
                    b.Property<int>("VisitNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BillingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CareRecipientId")
                        .HasColumnType("int");

                    b.Property<bool>("CheckBloodPressure")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckPainRating")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckTemperature")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckWeight")
                        .HasColumnType("bit");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeOut")
                        .HasColumnType("datetime2");

                    b.HasKey("VisitNoteId");

                    b.HasIndex("CareRecipientId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("VisitNote");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.WorkExperience", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FinalHourlyRate")
                        .HasColumnType("float");

                    b.Property<double?>("HourlyRate")
                        .HasColumnType("float");

                    b.Property<bool>("IsContactAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfSupervisor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForLeaving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("YourDuties")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkExperienceId");

                    b.HasIndex("NurseId");

                    b.ToTable("WorkExperience");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.AgencyServedCounties", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany("AgencyServedCounties")
                        .HasForeignKey("EmployerId");

                    b.Navigation("County");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.AgencyTaskList", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.TaskListTemplate", "TaskListTemplate")
                        .WithMany()
                        .HasForeignKey("TaskListTemplateId");

                    b.Navigation("Employer");

                    b.Navigation("TaskListTemplate");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.BuyCourses", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareCoordinationNote", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipient", null)
                        .WithMany("CareCoordinationNotes")
                        .HasForeignKey("CareRecipientId");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipient", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipientLocation", "CareRecipientLocation")
                        .WithMany()
                        .HasForeignKey("CareRecipientLocationId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipientRelationship", "CareRecipientRelationship")
                        .WithMany()
                        .HasForeignKey("CareRecipientRelationshipId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Client", "Client")
                        .WithMany("CareRecipients")
                        .HasForeignKey("ClientId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.ServiceList", "ServiceList")
                        .WithMany("CareRecipients")
                        .HasForeignKey("ServiceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("CareRecipientLocation");

                    b.Navigation("CareRecipientRelationship");

                    b.Navigation("City");

                    b.Navigation("Client");

                    b.Navigation("ServiceList");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Certification", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany("Certifications")
                        .HasForeignKey("NurseId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Nurse");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.City", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Client", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipientRelationship", "CareRecipientRelationship")
                        .WithMany("Clients")
                        .HasForeignKey("CareRecipientRelationshipId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.City", "City")
                        .WithMany("Clients")
                        .HasForeignKey("CityId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany("Clients")
                        .HasForeignKey("StateId");

                    b.Navigation("CareRecipientRelationship");

                    b.Navigation("City");

                    b.Navigation("IdentityUser");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.County", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Education", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.EducationType", "EducationType")
                        .WithMany("Education")
                        .HasForeignKey("EducationTypeId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany("Educations")
                        .HasForeignKey("NurseId");

                    b.Navigation("EducationType");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Employer", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId");

                    b.Navigation("City");

                    b.Navigation("State");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.HiringAgreements", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Job", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipient", "CareRecipient")
                        .WithMany()
                        .HasForeignKey("CareRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("CareRecipient");

                    b.Navigation("Client");

                    b.Navigation("Employer");

                    b.Navigation("JobTitle");

                    b.Navigation("Resource");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.JobApply", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany("JobApplies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Job");

                    b.Navigation("Nurse");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.JobApplyForAgency", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany("JobApplyForAgencies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Nurse", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("City");

                    b.Navigation("IdentityUser");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NurseCnaSkills", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NurseComment", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Order", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Reference", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany("References")
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Referral", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.State", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskList", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany("TaskList")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.VisitNote", "VisitNote")
                        .WithMany("TaskLists")
                        .HasForeignKey("VisitNoteId");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Nurse");

                    b.Navigation("VisitNote");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskListTemplate", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.TaskListCategory", "TaskListCategory")
                        .WithMany()
                        .HasForeignKey("TaskListCategoryId");

                    b.Navigation("TaskListCategory");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskListVerification", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Job");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.UploadDocuments", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.VisitNote", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipient", null)
                        .WithMany("VisitNotes")
                        .HasForeignKey("CareRecipientId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany("VisitNotes")
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", null)
                        .WithMany("VisitNotes")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany("VisitNotes")
                        .HasForeignKey("NurseId");

                    b.Navigation("Employer");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.WorkExperience", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipient", b =>
                {
                    b.Navigation("CareCoordinationNotes");

                    b.Navigation("VisitNotes");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipientRelationship", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.City", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Client", b =>
                {
                    b.Navigation("CareRecipients");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.EducationType", b =>
                {
                    b.Navigation("Education");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Employer", b =>
                {
                    b.Navigation("AgencyServedCounties");

                    b.Navigation("VisitNotes");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Job", b =>
                {
                    b.Navigation("JobApplies");

                    b.Navigation("JobApplyForAgencies");

                    b.Navigation("TaskList");

                    b.Navigation("VisitNotes");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Nurse", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("Educations");

                    b.Navigation("References");

                    b.Navigation("VisitNotes");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.ServiceList", b =>
                {
                    b.Navigation("CareRecipients");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.VisitNote", b =>
                {
                    b.Navigation("TaskLists");
                });
#pragma warning restore 612, 618
        }
    }
}
