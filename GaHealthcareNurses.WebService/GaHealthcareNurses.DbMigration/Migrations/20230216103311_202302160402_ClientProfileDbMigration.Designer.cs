// <auto-generated />
using System;
using GaHealthcareNurses.Entity;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GaHealthcareNurses.DbMigration.Migrations
{
    [DbContext(typeof(GaHealthcareNursesContext))]
    [Migration("20230216103311_202302160402_ClientProfileDbMigration")]
    partial class _202302160402_ClientProfileDbMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("EmployerNurse", b =>
                {
                    b.Property<string>("EmployersId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NursesId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EmployersId", "NursesId");

                    b.HasIndex("NursesId");

                    b.ToTable("EmployerNurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.AdultAssessment", b =>
                {
                    b.Property<int>("AdultAssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ADCopiesOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADDescription1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADDescription2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADDescription3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ADEffectiveDate1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ADEffectiveDate2")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ADEffectiveDate3")
                        .HasColumnType("datetime2");

                    b.Property<string>("ADLabel1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADLabel2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ADLabel3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbdGirth")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AbnormalGait")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivitiesPermitted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityAmbulationAL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityBathingAL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityDailyLivingComment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityDressingAL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityEatingAL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityHousekeepingAL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityMealPrepAL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityToiletingAL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityTransferAL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalCareGivers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalRepresentative")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdditionalVitalSigns")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdministrationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AlcoholOrDrugAddictionSuspected")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AmputationOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Appetite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssessmentSummary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssistPatient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("AssistiveDeviceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("BMConsistencyOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BPMeasuredOnLeft")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BSActivityIs1")
                        .HasColumnType("bit");

                    b.Property<bool>("BSActivityIs2")
                        .HasColumnType("bit");

                    b.Property<bool>("BSActivityIs3")
                        .HasColumnType("bit");

                    b.Property<bool>("BSActivityIs4")
                        .HasColumnType("bit");

                    b.Property<string>("BSActivityScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BSFrictionAndShearIs1")
                        .HasColumnType("bit");

                    b.Property<bool>("BSFrictionAndShearIs2")
                        .HasColumnType("bit");

                    b.Property<bool>("BSFrictionAndShearIs3")
                        .HasColumnType("bit");

                    b.Property<string>("BSFrictionAndShearScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BSMobilityIs1")
                        .HasColumnType("bit");

                    b.Property<bool>("BSMobilityIs2")
                        .HasColumnType("bit");

                    b.Property<bool>("BSMobilityIs3")
                        .HasColumnType("bit");

                    b.Property<bool>("BSMobilityIs4")
                        .HasColumnType("bit");

                    b.Property<string>("BSMobilityScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BSMoistureIs1")
                        .HasColumnType("bit");

                    b.Property<bool>("BSMoistureIs2")
                        .HasColumnType("bit");

                    b.Property<bool>("BSMoistureIs3")
                        .HasColumnType("bit");

                    b.Property<bool>("BSMoistureIs4")
                        .HasColumnType("bit");

                    b.Property<string>("BSMoistureScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BSNutritionIs1")
                        .HasColumnType("bit");

                    b.Property<bool>("BSNutritionIs2")
                        .HasColumnType("bit");

                    b.Property<bool>("BSNutritionIs3")
                        .HasColumnType("bit");

                    b.Property<bool>("BSNutritionIs4")
                        .HasColumnType("bit");

                    b.Property<string>("BSNutritionScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("BSSensoryPerceptionIs1")
                        .HasColumnType("bit");

                    b.Property<bool>("BSSensoryPerceptionIs2")
                        .HasColumnType("bit");

                    b.Property<bool>("BSSensoryPerceptionIs3")
                        .HasColumnType("bit");

                    b.Property<bool>("BSSensoryPerceptionIs4")
                        .HasColumnType("bit");

                    b.Property<string>("BSSensoryPerceptionScore")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BillingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodPressure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodPressurePosition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodSugar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodSugarMeasuresAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BreathSoundsOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CapChange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Capillary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CareGiverOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CarePlanOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Catheter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatheterComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatheterFlush")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatheterLastPerformedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CatheterOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CauseOfPain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CertificationFromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CertificationToDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangeInMood")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ClearPathwaysDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CoordinationDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfAssessment")
                        .HasColumnType("datetime2");

                    b.Property<string>("DescribeReported")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diabetes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiabeticFootInspectionFindings")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DialysisOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DialysisTypeFreq")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DischargePlanning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DressingChange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ENTMOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EarNoseThroatMouthComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EnteralFeeding")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EquipmentSafetyDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EvidenceActual")
                        .HasColumnType("bit");

                    b.Property<bool>("EvidenceEmotiona")
                        .HasColumnType("bit");

                    b.Property<bool>("EvidenceFinancial")
                        .HasColumnType("bit");

                    b.Property<bool>("EvidencePhysical")
                        .HasColumnType("bit");

                    b.Property<bool>("EvidencePotential")
                        .HasColumnType("bit");

                    b.Property<bool>("Evidenceobserved")
                        .HasColumnType("bit");

                    b.Property<string>("FacilityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FalPrecautionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FamilyCareGiverSupport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FoleySize")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyDMESupplies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyEligibility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyGoals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyHHA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyInterventions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyMSW")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyOT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyOfPainAndImpact")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyPT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyPrognosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyRD")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyRehabPotential")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencySN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FrequencyST")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionalLimitations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenitourinaryOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GlucometerType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GripStrengthOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GripStrengthUnequal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Has10OrMoreMedications")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHadAFall")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHadHosiptalAdmission")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHadHospitalAmission")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHadSkinUlcer")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfAngina")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfArthritis")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfAsthma")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfAtrialFib")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfBradycardia")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfBronchitis")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfBursitis")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfCOPD")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfContractures")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfCrohnsDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfEmphysema")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfExacerbatedAsthma")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfGERD")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfGIBleed")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfHeartBurn")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfHeartFailure")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfHypertension")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfHyportension")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfImplantedDefribilator")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfIntermittentAsthma")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfLupus")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfMildAsthma")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfModerateAsthma")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfMuscularDystrophy")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfMyastheniaGravis")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfNonSmoker")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfOsteoarthritis")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfOsteoarthritisPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfOsteoarthritisSecondary")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfOsteoporosis")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfOtherGastro")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfPacemaker")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfPad")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfPalpitations")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfPersistentAsthma")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfPleurisy")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfPneumonia")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfRotatorCuffTear")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfRotatorCuffTearL")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfRotatorCuffTearR")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfSevereAsthma")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfSmoking")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfStent")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfTB")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfTachycardia")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfTendinitis")
                        .HasColumnType("bit");

                    b.Property<bool>("HasHistoryOfUIsers")
                        .HasColumnType("bit");

                    b.Property<bool>("HasLearningBarrier")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNeedsAssistanceWithADL")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNeedsAssistanceWithMedication")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNeedsAssistanceWithRespiratory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNoHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNoHistoryOfGastro")
                        .HasColumnType("bit");

                    b.Property<bool>("HasNoMusculoskeletalHistory")
                        .HasColumnType("bit");

                    b.Property<string>("HasPatientAllMedications")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HasPatientAllMedicationsNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasPrimaryDagnosis")
                        .HasColumnType("bit");

                    b.Property<string>("HeadacheFrequencyDuration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Height")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HeightMeasuredAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryCommentery")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryOfOtherGastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryOfSmoking")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HistoryOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HowOftenChecked")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HyperProcedureDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HypoOnSupplementalTreatment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Inches")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncisionClosedWithOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IncisionSizeAndAppearance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Influenza")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InfluenzaDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InfluenzaLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfusionNeuroComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfusionOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfusionTherapy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfusionTherapyAdmin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfusionTypeBrand")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InsertionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InsertionSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntegumentaryColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntegumentaryColorOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntegumentaryLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IntegumentarySkin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InterventionsEducation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsADCopiesAtHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsADCopiesOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsAbdGirth")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbdominalDistention")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbdominalPain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbleToAdministerInsulin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbleToDrawInsulin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbnormalGait")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbnormalHeartSounds")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbsentLLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbsentLUpper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbsentRLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbsentRUpper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAbuseNoneObservedReported")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActiveUTI")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdequateFoodStorage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdequateHeating")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdequateLighting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdequateMedication")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdequateSanitation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdequateWater")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdministrationDetails")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdvanceDirectives")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAgencyPhone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlcoholOrDrugAddictionNone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlcoholOrDrugAddictionSuspected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlcoholOrDrugAddictionUnknown")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAmericanIndian")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAmputation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAmputationAK")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAmputationBK")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAmputationL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAmputationOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAmputationR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAmputationUE")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAnuria")
                        .HasColumnType("bit");

                    b.Property<bool>("IsArrhythmia")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAsian")
                        .HasColumnType("bit");

                    b.Property<string>("IsAwareAdvanceDirective")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsBMConsistencyFormed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBMConsistencyHard")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBMConsistencyMucous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBMConsistencyOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBMConsistencySoft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBasicHomeSafety")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBathroomAccessible")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBathroomWithoutGrabBars")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlackAmerican")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBloodSugarGlucometer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBowelSoundAbsent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBowelSoundDiminished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBowelSoundHyperActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBowelSoundNormal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBreathSoundsOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBreathsoundsClear")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBurning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCaneInHome")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCapChange")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCapillary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCareGiverAngry")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCareGiverDiscouraged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCareGiverHavingDifficultyCoping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCareGiverOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCareGiverReadyToLearn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCareGiverUnmotivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCareGiverWithdrawn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanAide")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanCOTA")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanCaseManager")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanClinicalManager")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanMSW")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanOT")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanPT")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanPTA")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanPhysician")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanSN")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanST")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCarePlanningPatient")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCatheter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCatheterFlush")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCatheterOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCentralLine")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChangeInCognition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChangeInMood")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChestPain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsChronic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClearLLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClearLUpper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClearRLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsClearRUpper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColorBrown")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColorClear")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColorCloudy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColorDarkYellow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColorRedPink")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColorYellow")
                        .HasColumnType("bit");

                    b.Property<bool>("IsColostomy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCommodeInHome")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompression")
                        .HasColumnType("bit");

                    b.Property<bool>("IsConstipation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCough")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCoughAcute")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCoughChronic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCoughDry")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCoughProductive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCracklesLLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCracklesLUpper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCracklesRLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCracklesRUpper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCurrentPainControlAdequate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCyanosis")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiabetes")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiabeticFootInspection")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDialysis")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDialysisOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiaphoresis")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiarrhea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDifficultySwallowing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiminishedLLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiminishedLUpper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiminishedRLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiminishedRUpper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDischargePlanEstablished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDiseaseInfo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDizzy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDoNotResuscitate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDressingChange")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDyspnea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMChewingProblems")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMDentures")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMDenturesLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMDenturesPartial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMDenturesUppper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMEarPain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMEarPainL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMEarPainR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMHearingAids")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMHearingAidsL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMHearingAidsR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMHearingLoss")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMHearingLossL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMHearingLossR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMHoarseness")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMLossOfSmell")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMNasalCongestion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMNoDeficits")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMSoreThroat")
                        .HasColumnType("bit");

                    b.Property<bool>("IsENTMTinnitus")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdema")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdemaDependent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdemaL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdemaPedal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdemaR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsElectricCordsFrayed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEmergencyPlanning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnteralFeeding")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnvironmentCluttered")
                        .HasColumnType("bit");

                    b.Property<bool>("IsExternalCathLength")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFRAbove65")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFRCognitiveImpairment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFRDx")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFREnvironmentalHaz")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFRImpairedFunction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFRIncontinence")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFRPainAffecting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFRPolyPharmacy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFRPriorFall")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFRVisualImpairment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFacialDroop")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFatigues")
                        .HasColumnType("bit");

                    b.Property<string>("IsFireExtinguisherPresent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFloorCoveringUnsecured")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFoleySize")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForgetful")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFoulOdor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFrequency")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFrequent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenitourinaryNoHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGenitourinaryOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGripStrengthEqual")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGripStrengthOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGripStrengthStrong")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGripStrengthUnequal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsGripStrengthWeak")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHIPAANoticeOfPrivacy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHeadache")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHemoptysis")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHispanic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistoryOfDementia")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistoryOfMS")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistoryOfMemoryLoss")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistoryOfParkinsons")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistoryOfSeizures")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistoryOfTIA")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHistoryOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHowOftenChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHyperProcedure")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHypoOnSupplementalTreatment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIleostomy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncisionClosedWithOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncisionClosedWithStaples")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncisionClosedWithSteriStrips")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncisionClosedWithSurgicalAdhesive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncisionClosedWithSutures")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIncontinence")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIndigestion")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInfluenza")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInfusionAntibiotics")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInfusionNA")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInfusionOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInfusionPainControl")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInfusionTherapy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInfusionTherapyAdmin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInsectRodentInfested")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntegumentaryColor")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntegumentaryColorOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntegumentarySkin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntegumentaryTemp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntegumentaryTempClammy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntegumentaryTempCool")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntegumentaryTempDiaphoretic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntegumentaryTempDry")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIntegumentaryTempWarm")
                        .HasColumnType("bit");

                    b.Property<bool>("IsIrrigationCatheter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsKidneyStones")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLBFunctional")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLBHearing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLBLanguage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLBMental")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLBNoneIdentified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLBOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLBPhysical")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLBPsychosocial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLBReadingWriting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLBVision")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLabsDrawn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastBmIncontinence")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLastOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeavingAlone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeftAnkle")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLeftCalf")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedMobility")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLimitedROM")
                        .HasColumnType("bit");

                    b.Property<bool>("IsLossOfBalance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMaterialOthers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationClearlyLabelled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationDisposal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationExpiration")
                        .HasColumnType("bit");

                    b.Property<string>("IsMedicationManaged")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMedicationNeeded2or3TimesDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationNeededLessThanDaily")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationNeededMoreThan3times")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationNeededNever")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationNeededOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationRegimen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationStorage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMentalNodeficits")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMidArmCircumference")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMidlineCatheter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMoist")
                        .HasColumnType("bit");

                    b.Property<string>("IsMoreThanOneExit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNSDoesntHaveEnoughMoney")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNSDrinks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNSEatsAlone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNSEatsFewFruits")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNSEatsFewer")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNSHasToothProblems")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNSIllnessOrCondition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNSLostOrGainedPounds")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNSNotAlwaysAble")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNSTakesThree")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNativeHawaiian")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNausea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeckVein")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeedsAssistance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeuroAgitated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeuroAlert")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeuroConfused")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeuroDepressed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeuroDisoriented")
                        .HasColumnType("bit");

                    b.Property<string>("IsNeuroLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsNeuroOriented")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeuroOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeuroPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeuroPlace")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNeuroTime")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoDeficits")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoEquipmentInHome")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoMedications")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoNeuroHistory")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoPain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNoneIdentified")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNormalHeartSounds")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNumbnesTingling")
                        .HasColumnType("bit");

                    b.Property<bool>("IsO2")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOASISPrivacyNotice")
                        .HasColumnType("bit");

                    b.Property<string>("IsObstaclesWithNew")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOrthopnea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOstomy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOtherDetails")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOtherEquipmentInHome")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOtherNeuro")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOxygenInUse")
                        .HasColumnType("bit");

                    b.Property<string>("IsOxygenSignPosted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPCGAssistADLs")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPCGAssistFinincially")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPCGAssistHomeMtce")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPCGAssistMedication")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPCGAssistOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPCGAssistShopping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaatientAngry")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainAching")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainBurning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainCramping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainDull")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainPinching")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainRelievedByHeat")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainRelievedByIce")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainRelievedByMedication")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainRelievedByOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainRelievedByRelaxation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainRelievedByRest")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainScaleFaces")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainScaleNumeric")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainScaleOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainSharp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainShooting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainThrobbing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainTingling")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainWorseByMovement")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainWorseByOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainWorseByPosture")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPainWorseByTimeOfDay")
                        .HasColumnType("bit");

                    b.Property<string>("IsPatientAbleToUseSafely")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPatientAngry")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientDiaphoresis")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientDiscouraged")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientGrimacing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientGuarding")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientHavingDifficultyCoping")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientIrritable")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientMoaning")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientOthers")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientReadyToLearn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientRestless")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientSelfMonitoringBP")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientSelfMonitoringPulse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientSelfMonitoringSP02")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientSelfMonitoringTemp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientTense")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientUnabletoCommunicate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientUnmotivated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientWithRepresentative")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientWithVitalSignsChange")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPatientWithdrawn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPedalL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPedalPulses")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPedalR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPeripheralLine")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPetsKept")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPillBoxUtilized")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPink")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlacement")
                        .HasColumnType("bit");

                    b.Property<string>("IsPlanForBackupOxygen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPlansForAssessment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlansForOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlansForPreparation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlansForTeaching")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPlansForTreatment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPneumonia")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPolycysticDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProInterpreter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProInterpreterAccepted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProInterpreterDeclined")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProInterpreterDeclinedUseOwn")
                        .HasColumnType("bit");

                    b.Property<bool>("IsProsthesisAppliance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPsychiatricIllness")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPupillaryReaction")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPupillaryReactionL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPupillaryReactionR")
                        .HasColumnType("bit");

                    b.Property<string>("IsRecentHosp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRenalDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("IsResidualAmount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRespirationsEasy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRightAnkle")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRightCalf")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRightsAndResponsibilities")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafetyPlanDiscussed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeeInfusionAddendum")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeizuresTremors")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelfCare")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSelfCatheter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShingle")
                        .HasColumnType("bit");

                    b.Property<bool>("IsShowerBenchInHome")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSituationImpactingPlan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSleepRestAdequate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSleepRestInadequate")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSlurredSpeech")
                        .HasColumnType("bit");

                    b.Property<string>("IsSmokeDetectorMaintained")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSmokeDetectorsMissing")
                        .HasColumnType("bit");

                    b.Property<string>("IsSomkeDetectorOnAllLevels")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsSpasms")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpeechDifficulties")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpiritualCulturalImplication")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSpiritualResource")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSputum")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStairsIntoHome")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStairsNextToPatientAreas")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStairsSafe")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStandardPrecautions")
                        .HasColumnType("bit");

                    b.Property<int>("IsStateHotlineNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsStoma")
                        .HasColumnType("bit");

                    b.Property<bool>("IsStroke")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTetanus")
                        .HasColumnType("bit");

                    b.Property<string>("IsTherePlanForExit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsTherePlanForNaturalDisaster")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsTherePlanForPowerFailure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsThyroidDisease")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTracheostomy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTraumaticBrainInjury")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTubingChange")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTypeGroshong")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTypeInfusionPort")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTypeNonGroshong")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTypeNonTunneled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTypeOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTypePICC")
                        .HasColumnType("bit");

                    b.Property<bool>("IsTypeTunneled")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnableToUsePhone")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgency")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrineTestingPerformed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVertigo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsViaCPAC")
                        .HasColumnType("bit");

                    b.Property<bool>("IsViaContinous")
                        .HasColumnType("bit");

                    b.Property<bool>("IsViaMask")
                        .HasColumnType("bit");

                    b.Property<bool>("IsViaNC")
                        .HasColumnType("bit");

                    b.Property<bool>("IsViaPRN")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionBlurred")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionBlurredL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionBlurredR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionCataracts")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionCataractsL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionCataractsR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionContacts")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionContactsL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionContactsR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionGlasses")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionGlaucoma")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionGlaucomaL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionGlaucomaR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionLegallyBlind")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionLegallyBlindL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionLegallyBlindR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionMacularDegen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionMacularDegenL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionMacularDegenR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionNoDeficits")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisionOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVoidingWithoutProblems")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVomiting")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWalkerInHome")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeaknessParalysis")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeaknessParalysisL")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeaknessParalysisR")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWeightBearingLimitations")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWheelChairInHome")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWheezingLLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWheezingLUpper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWheezingRLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWheezingRUpper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWhenToContactPhysician")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWhite")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWithCareGiver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWoundIdentified")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("LBOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabsDrawn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastBM")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastContactReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeftAnkle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LeftCalf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LimitedMobility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LimitedROMlocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LivingArrangementComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lumen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialOthers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationNeededOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentalPsychosocialCognitiveStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MidArmCircumference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MostRecentFall")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NSComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfPhysician")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NeuroOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NextPhysicianVisitDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutritionalRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionalScreeningTotal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("O2LperMin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObstaclesWithNew")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ostomy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherDetails")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherEquipment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherNeuro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCGAssistOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PCGAvailability")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PTInr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PainComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PainLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PainRelievedByOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PainScaleOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PainWorseByOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientHandlingFinances")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientLives")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientLivesIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientOthers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientSelfMonitoring")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicianAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicianAddressCity")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicianAddressPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicianAddressState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicianAddressZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicianPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PillBoxUtilized")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlansForOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pneumonia")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PneumoniaDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PneumoniaLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryCGAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryCGLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryCGName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryCGPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrimaryCGRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProInterpreterDeclined")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProInterpreterDeclinedUseOwn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProsthesisApplianceSpecified")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PsychiatricIllness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PtInrIsVenipuncture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pulse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PulseSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForHomecare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForVisit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecentFallAndOutcome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecentFallComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RecentHospDate1")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RecentHospDate2")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RecentHospDate3")
                        .HasColumnType("datetime2");

                    b.Property<string>("RecentHospReason1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecentHospReason2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RecentHospReason3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferringPhysician")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativeAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativeLanguage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativePhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativeRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativeRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RepresentativeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResidualAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Respirations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RespirationsType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseToInterventions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightAnkle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RightCalf")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SP02Sat")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyMeasuresRecommended")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyPlanDiscussed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shingle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ShingleDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ShingleLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SituationImpactingPlan")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SleepRestInadequate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpiritualCulturalImplication")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpiritualResource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SputumColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartOfCaredate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StentLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrokeDeficits")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrokeDeficitsSpecified")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuppliesIssued")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SurgicalWound")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Temperature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemperatureMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TemperatureUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tetanus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TetanusDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TetanusLocation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ThyroidDisease")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TimeOut")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tracheostomy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TraumaticBrainInjury")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TubingChange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Urostomy")
                        .HasColumnType("bit");

                    b.Property<string>("VerbalOrderFrom")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerbalOrderReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VerbalOrderReceivedTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisionComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisionOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Weight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightBearingLimitations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightMeasuredAs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WeightUnit")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoAssistPatient")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoAssistsToAdminister")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoAsssistsToDraw")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WithOthers")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WongBakerScale")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdultAssessmentId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("AdultAssessment");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.AgencyServedCounties", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.HasIndex("EmployerId");

                    b.ToTable("AgencyServedCounties");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.AgencyTaskList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("TaskListTemplateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("TaskListTemplateId");

                    b.ToTable("AgencyTaskList");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.BlsAreaZipcode", b =>
                {
                    b.Property<double>("BlsAreaCode")
                        .HasColumnType("float");

                    b.Property<string>("BlsAreaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ZipCode")
                        .HasColumnType("float");

                    b.ToTable("BlsAreaZipcode");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.BlsSalaryDetails", b =>
                {
                    b.Property<double>("AreaCode")
                        .HasColumnType("float");

                    b.Property<string>("AreaName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("DataType")
                        .HasColumnType("float");

                    b.Property<double>("Field3")
                        .HasColumnType("float");

                    b.Property<double>("Id")
                        .HasColumnType("float");

                    b.Property<double>("MedianSalary")
                        .HasColumnType("float");

                    b.Property<double?>("OccupationCode")
                        .HasColumnType("float");

                    b.Property<string>("OccupationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Series")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("YearPeriod")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("BlsSalaryDetails");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.BuyCourses", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PurchasedDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("NurseId");

                    b.ToTable("BuyCourses");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareCoordinationNote", b =>
                {
                    b.Property<int>("CareCoordinationNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("Aide")
                        .HasColumnType("bit");

                    b.Property<int?>("CareRecipientId")
                        .HasColumnType("int");

                    b.Property<bool>("CaseManager")
                        .HasColumnType("bit");

                    b.Property<bool>("CommunityResource")
                        .HasColumnType("bit");

                    b.Property<string>("Discussion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DmeVendor")
                        .HasColumnType("bit");

                    b.Property<bool>("Don")
                        .HasColumnType("bit");

                    b.Property<int?>("JobId")
                        .HasColumnType("int");

                    b.Property<bool>("MSW")
                        .HasColumnType("bit");

                    b.Property<bool>("OT_COTA")
                        .HasColumnType("bit");

                    b.Property<bool>("Other")
                        .HasColumnType("bit");

                    b.Property<bool>("PT_PTA")
                        .HasColumnType("bit");

                    b.Property<bool>("Pharmacist")
                        .HasColumnType("bit");

                    b.Property<bool>("Physician")
                        .HasColumnType("bit");

                    b.Property<bool>("RN_LPN_LVN")
                        .HasColumnType("bit");

                    b.Property<string>("Resolution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SLP")
                        .HasColumnType("bit");

                    b.Property<bool>("TherapySupervisor")
                        .HasColumnType("bit");

                    b.HasKey("CareCoordinationNoteId");

                    b.HasIndex("CareRecipientId");

                    b.ToTable("CareCoordinationNote");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CarePlan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ActivitiesPermitted")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityAmbulationFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityAmbulationNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityExcerciseFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityExcerciseNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityOther1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityOther1Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityOther1Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityOther2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityOther2Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityOther2Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityROMFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityROMNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityRepositionFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityRepositionNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityTransferAssistFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ActivityTransferAssistNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdvanceDirectives")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssistiveDevicesOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CareStartDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CertificationFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CertificationTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("CnaPlanOfCareAllergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CodeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DiagnosisC")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DischargePlanning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DmeSuppliesi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Eligibility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationAssistWithToiletFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationAssistWithToiletNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationBedPanFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationBedPanNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationCCareFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationCCareNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationLastBMFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationLastBMNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationOstomyFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationOstomyNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationOther1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationOther1Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationOther1Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationOther2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationOther2Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationOther2Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationUrineBagFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EliminationUrineBagNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EnviromentalCleanFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnviromentalCleanNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnviromentalLaundryFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnviromentalLaundryNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvironmentalBedLinenFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvironmentalBedLinenNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvironmentalEquipCareFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvironmentalEquipCareNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvironmentalOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvironmentalOtherFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnvironmentalOtherNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Frequencies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionalLimitations")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Goals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HHAReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HearingAid")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionsAmputee")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionsOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionsOxygen")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionsSpecialEquip")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InstructionsWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Interventions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActivityAmbulation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityArmLeft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityArmRight")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityExcercise")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityExcerciseOT")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityExcercisePT")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityExcerciseSLP")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityLegLeft")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityLegRight")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityOther1")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityOther2")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityROM")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityROMActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityROMPassive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityReposition")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityTransferAssist")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityTransferAssistBed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityTransferAssistChair")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityTransferAssistCommode")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityTransferAssistHoyerLift")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityTransferAssistShower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActivityTransferAssistTub")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAlert")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAssistiveDevices")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAssistiveDevicesBraceSplint")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAssistiveDevicesCane")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAssistiveDevicesCrutches")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAssistiveDevicesOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAssistiveDevicesWC")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAssistiveDevicesWalker")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBedBound")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBedRestWithBrp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDentureLower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDenturePartial")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDentureUpper")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDentures")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminationAssistWithToilet")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminationBedPan")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminationCCare")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminationCCareExternal")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminationCCareSuprapublic")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminationCCareUrethral")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminationLastBM")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminationOstomy")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminationOther1")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminationOther2")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEliminationUrineBag")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnviromentalClean")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnviromentalCleanBathroom")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnviromentalCleanBedroom")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnviromentalCleanKitchen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnviromentalCleanLiving")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnviromentalLaundry")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnvironmentalBedLinen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnvironmentalEquipCare")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEnvironmentalOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHearingDeficit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHearingDeficitAid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHearingDeficitSpeech")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstructionsAmputee")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstructionsOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstructionsOxygen")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstructionsSpecialEquip")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInstructionsWeight")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationReminder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicationSelfAssist")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNutritionFeeding")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNutritionFluids")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNutritionFluidsEncourage")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNutritionFluidsLimit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNutritionOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNutritionPrepMeals")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNutritionPrepSnacks")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveBP")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveBPOver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveBPUnder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveChangesInSkin")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveIntake")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveIntakeOver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveIntakeUnder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveNoBMInDays")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveOther1")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveOther2")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveOutputAmount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveOutputAmountOver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveOutputAmountUnder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObservePainAbove")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObservePulse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObservePulseOver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObservePulseUnder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveReddenedArea")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveReddenedOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveRespiration")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveRespirationOver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveRespirationUnder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveTemp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveTempOver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveTempUnder")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveWeight")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveWeightGain")
                        .HasColumnType("bit");

                    b.Property<bool>("IsObserveWeightLoss")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrientedConfused")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrientedPerson")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrientedPlace")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOrientedTime")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCare")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareBathBed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareBathChair")
                        .HasColumnType("bit");

                    b.Property<string>("IsPersonalCareBathPartial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPersonalCareBathTub")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareCheckPressure")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareCleanNails")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareDressing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareFootCare")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareHairCare")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareOral")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareOther1")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareOther2")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCarePeriCare")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareShampoo")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareShave")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareShower")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareShowerUseChair")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareSkinCare")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareSkinCareMoisturize")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPersonalCareStockings")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPertientInformationOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafetyAmbulateOnly")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafetyBleeding")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafetyFallPrecautions")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafetyHip")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafetyOther1")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafetyOther2")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafetyProneToFractures")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafetySeizure")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafetySideRailsUp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSafetySwallowing")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUpAsTolerated")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisualDeficit")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisualDeficitContacts")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisualDeficitGlasses")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVisualDeficitOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVitalSignsBP")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVitalSignsIntake")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVitalSignsOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVitalSignsOutput")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVitalSignsPainRating")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVitalSignsPulse")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVitalSignsRespirations")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVitalSignsTemp")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVitalSignsWeight")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LocationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicalRecordNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationReminderFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationReminderNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationSelfAssistFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MedicationSelfAssistNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Medicationsl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MentalStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NutritionFeedingFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionFeedingNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionFluidsFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionFluidsNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionOtherFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionOtherNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionPrepMealsFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionPrepMealsNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionPrepSnacksFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionPrepSnacksNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NutritionalRequirements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveBPOver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveBPUnder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveChangesInSkin")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveIntakeOver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveIntakeUnder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveOther1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveOther2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveOutputAmountOver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveOutputAmountUnder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservePainAbove")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservePulseOver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObservePulseUnder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveReddenedOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveRespirationOver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveRespirationUnder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveTempOver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveTempUnder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObserveWeightLoss")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientClaimNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareBathFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareBathNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareCheckPressureFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareCheckPressureNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareCleanNailsFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareCleanNailsNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareDressingFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareDressingNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareFootCareFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareFootCareNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareHairCareFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareHairCareNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareOralFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareOralNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareOther1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareOther1Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareOther1Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareOther2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareOther2Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareOther2Notes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCarePeriCareFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCarePeriCareNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareShampooFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareShampooNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareShaveFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareShaveNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareShowerFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareShowerNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareSkinCareFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareSkinCareNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareStockingsFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonalCareStockingsNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PertientInformationOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicianAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhysicianName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prognosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RehabPotential")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyMeasures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyOther1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SafetyOther2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("VerbalSOCDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("VitalSignsBPFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsBPNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsIntakeFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsIntakeNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsOtherFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsOtherNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsOutputFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsOutputNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsPainRatingFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsPainRatingNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsPulseFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsPulseNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsRespirationsFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsRespirationsNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsTempFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsTempNotes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsWeightFrequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VitalSignsWeightNotes")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("CarePlan");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipient", b =>
                {
                    b.Property<int>("CareRecipientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<bool>("Alert")
                        .HasColumnType("bit");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CareRecipientLocationId")
                        .HasColumnType("int");

                    b.Property<int?>("CareRecipientRelationshipId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CodeStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diagnosis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EndDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Forgetful")
                        .HasColumnType("bit");

                    b.Property<string>("Frequency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FunctionalLimitation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GenderPreference")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsResponsiblePartySameAsCareRecipient")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleInitial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MoreInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NoteToCaregiver")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Receptiveness")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyRelation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponsiblePartyTelephoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServiceListId")
                        .HasColumnType("int");

                    b.Property<string>("ServiceTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TotalHours")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Visibility")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhenToStart")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CareRecipientId");

                    b.HasIndex("CareRecipientLocationId");

                    b.HasIndex("CareRecipientRelationshipId");

                    b.HasIndex("CityId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceListId");

                    b.HasIndex("StateId");

                    b.ToTable("CareRecipient");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipientLocation", b =>
                {
                    b.Property<int>("CareRecipientLocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CurrentLocation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CareRecipientLocationId");

                    b.ToTable("CareRecipientLocation");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipientRelationship", b =>
                {
                    b.Property<int>("CareRecipientRelationshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Relationship")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CareRecipientRelationshipId");

                    b.ToTable("CareRecipientRelationship");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Certification", b =>
                {
                    b.Property<int>("CertificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AdditionInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationState")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CertificationType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CertificationId");

                    b.HasIndex("NurseId");

                    b.HasIndex("StateId");

                    b.ToTable("Certification");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.City", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CountyId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("CityId");

                    b.HasIndex("CountyId");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Client", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BestTimeToCal")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CareRecipientRelationshipId")
                        .HasColumnType("int");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HowYouHeardAboutUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleInitial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferralName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CareRecipientRelationshipId");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.ClientProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdvanceDir")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Allergies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ConversionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DNR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Geocode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GoesBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("HeightInFeet")
                        .HasColumnType("int");

                    b.Property<decimal>("HeightInInch")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Hobbies")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("InitAssessmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LeadCreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MailingName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobAppGeofence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OverrideGeofenceRadiusMet")
                        .HasColumnType("int");

                    b.Property<string>("PetOne")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PetThree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PetTwo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneMobile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SSN")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("TelephonyPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TriageLevelId")
                        .HasColumnType("int");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Will")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientProfile");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CountyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("CountyPopulation")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("County");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("AdultAssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("DiagnosisCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DxDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DxDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOtherDx")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrimaryDx")
                        .HasColumnType("bit");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("DiagnosisId");

                    b.HasIndex("AdultAssessmentId");

                    b.ToTable("Diagnosis");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.DischargeSummary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AdmittedToHospital")
                        .HasColumnType("bit");

                    b.Property<bool>("AdmittedToSkilledNursingFacility")
                        .HasColumnType("bit");

                    b.Property<bool>("Agitated")
                        .HasColumnType("bit");

                    b.Property<bool>("Alert")
                        .HasColumnType("bit");

                    b.Property<bool>("Comatose")
                        .HasColumnType("bit");

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CompletedViaTelephone")
                        .HasColumnType("bit");

                    b.Property<bool>("Confused")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Death")
                        .HasColumnType("bit");

                    b.Property<bool>("Depressed")
                        .HasColumnType("bit");

                    b.Property<bool>("DiscussionWithPatientOrFamily")
                        .HasColumnType("bit");

                    b.Property<bool>("Disoriented")
                        .HasColumnType("bit");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("FamilyAssumeResponsibility")
                        .HasColumnType("bit");

                    b.Property<bool>("Forgetful")
                        .HasColumnType("bit");

                    b.Property<string>("Goals")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Independent")
                        .HasColumnType("bit");

                    b.Property<string>("Interventions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<bool>("MovedOutOfServiceArea")
                        .HasColumnType("bit");

                    b.Property<bool>("MutualAgreementForDischarge")
                        .HasColumnType("bit");

                    b.Property<bool>("NoFurtherCareNeeded")
                        .HasColumnType("bit");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("Oriented")
                        .HasColumnType("bit");

                    b.Property<bool>("Other")
                        .HasColumnType("bit");

                    b.Property<bool>("OtherReason")
                        .HasColumnType("bit");

                    b.Property<bool>("PartiallyDependent")
                        .HasColumnType("bit");

                    b.Property<bool>("PatientOrFamilyRefusedServices")
                        .HasColumnType("bit");

                    b.Property<bool>("PhysicianRequest")
                        .HasColumnType("bit");

                    b.Property<string>("RejectionReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResponseToInterventions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<bool>("TotallyDependent")
                        .HasColumnType("bit");

                    b.Property<bool>("TransferredToAnotherAgency")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("DischargeSummary");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Education", b =>
                {
                    b.Property<int>("EducationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("AttendedFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("AttendedTo")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompleteAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EducationTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Institution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Major")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OtherQualification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SpecializedTraining")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationId");

                    b.HasIndex("EducationTypeId");

                    b.HasIndex("NurseId");

                    b.ToTable("Education");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.EducationType", b =>
                {
                    b.Property<int>("EducationTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationTypeId");

                    b.ToTable("EducationType");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Employer", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgencyWebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CNAs")
                        .HasColumnType("int");

                    b.Property<bool>("Calendar")
                        .HasColumnType("bit");

                    b.Property<bool>("CarePlan")
                        .HasColumnType("bit");

                    b.Property<bool>("CareRecipients")
                        .HasColumnType("bit");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("DischargeSummary")
                        .HasColumnType("bit");

                    b.Property<bool>("Documents")
                        .HasColumnType("bit");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HeatMap")
                        .HasColumnType("bit");

                    b.Property<bool>("InitialAssessment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubscriptionActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubscriptionRecurring")
                        .HasColumnType("bit");

                    b.Property<int?>("LPNs")
                        .HasColumnType("int");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NursesList")
                        .HasColumnType("bit");

                    b.Property<int?>("PCAs")
                        .HasColumnType("int");

                    b.Property<int?>("RNs")
                        .HasColumnType("int");

                    b.Property<bool>("ServiceAgreements")
                        .HasColumnType("bit");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<int?>("SubscriptionId")
                        .HasColumnType("int");

                    b.Property<bool>("SupervisoryVisits")
                        .HasColumnType("bit");

                    b.Property<bool>("Tasks")
                        .HasColumnType("bit");

                    b.Property<string>("TelephoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.HasIndex("SubscriptionId");

                    b.ToTable("Employer");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.HiringAgreements", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool?>("AbuseNeglectAndExploitationPolicy")
                        .HasColumnType("bit");

                    b.Property<bool?>("AcknowledgementOfPoliciesAndProcedures")
                        .HasColumnType("bit");

                    b.Property<bool?>("AlreadyHapititisBSeriesDone")
                        .HasColumnType("bit");

                    b.Property<bool?>("ClientCareInEmergency")
                        .HasColumnType("bit");

                    b.Property<bool?>("CnaAndPcaDutiesAndResponsibilities")
                        .HasColumnType("bit");

                    b.Property<bool?>("CodeOfEthics")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CommissionExpiresOn")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("ConfidientiallyStatement")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CredibleEvidenceFillingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("CredibleEvidenceOfAbuseStatement")
                        .HasColumnType("bit");

                    b.Property<bool?>("DeclinationOfInfluenzaVaccination")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DeclinationOfInfluenzaVaccinationFillingDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("DocumentationOfTrainingAndOrientation")
                        .HasColumnType("bit");

                    b.Property<bool?>("FireOrSafetyProcedure")
                        .HasColumnType("bit");

                    b.Property<bool?>("GahRegulations")
                        .HasColumnType("bit");

                    b.Property<bool?>("HepatitisBSeries")
                        .HasColumnType("bit");

                    b.Property<bool?>("JobDescription")
                        .HasColumnType("bit");

                    b.Property<string>("NotaryPublic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("PartnershipForHealth")
                        .HasColumnType("bit");

                    b.Property<bool?>("RefusedToTakeHepatitisBSeriesInPast")
                        .HasColumnType("bit");

                    b.Property<bool?>("WantToHaveHepatitisBSeries")
                        .HasColumnType("bit");

                    b.Property<string>("Witness")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("HiringAgreements");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.InOutTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("ClockInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ClockOutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("InOutTime");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("CareGiverRate")
                        .HasColumnType("int");

                    b.Property<int>("CareRecipientId")
                        .HasColumnType("int");

                    b.Property<string>("ClientId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ClientPaymentMethod")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ClientRatingToAgency")
                        .HasColumnType("float");

                    b.Property<double?>("ClientRatingToNurse")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("HourlyRate")
                        .HasColumnType("float");

                    b.Property<bool>("IsDischargeSummaryRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInitialAssesstmentRequired")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSupervisoryVisitsRequired")
                        .HasColumnType("bit");

                    b.Property<int?>("JobTitleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PostedTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReAssessmentFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("ReVisitFrequency")
                        .HasColumnType("int");

                    b.Property<int?>("ResourceId")
                        .HasColumnType("int");

                    b.Property<bool>("SentToNurse")
                        .HasColumnType("bit");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("JobId");

                    b.HasIndex("CareRecipientId");

                    b.HasIndex("ClientId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobTitleId");

                    b.HasIndex("ResourceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.JobApply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AcceptJobDescriptionAndPolicies")
                        .HasColumnType("bit");

                    b.Property<bool>("CNACanBeShared")
                        .HasColumnType("bit");

                    b.Property<bool>("CPRCanBeShared")
                        .HasColumnType("bit");

                    b.Property<string>("ClientFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ClientRating")
                        .HasColumnType("float");

                    b.Property<bool>("DocumentsCanBeShared")
                        .HasColumnType("bit");

                    b.Property<bool>("DrivingLicenseCanBeShare")
                        .HasColumnType("bit");

                    b.Property<bool>("G4CanBeShared")
                        .HasColumnType("bit");

                    b.Property<bool>("HiringDisclosuresCanBeShared")
                        .HasColumnType("bit");

                    b.Property<bool>("HiringPreScreeningCanBeShared")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("NurseFeedback")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("NurseRating")
                        .HasColumnType("float");

                    b.Property<string>("OfferedRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefferedRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefferedRateUpto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("RequiredHours")
                        .HasColumnType("float");

                    b.Property<bool>("SSNCanBeShared")
                        .HasColumnType("bit");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<bool>("TBResultsCanBeShared")
                        .HasColumnType("bit");

                    b.Property<bool>("W4CanBeShared")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.HasIndex("StatusId");

                    b.ToTable("JobApply");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.JobApplyForAgency", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("OfferedRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PrefferedRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("StatusId");

                    b.ToTable("JobApplyForAgency");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.JobTitle", b =>
                {
                    b.Property<int>("JobTitleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JobTitleId");

                    b.ToTable("JobTitle");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NotifyConfiguration", b =>
                {
                    b.Property<int>("NotifyConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DaysBeforeDocExpires")
                        .HasColumnType("int");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("HoursFrequencyForDocs")
                        .HasColumnType("float");

                    b.Property<int>("MinutesAfterShiftEnd")
                        .HasColumnType("int");

                    b.Property<int>("MinutesBeforeClockIn")
                        .HasColumnType("int");

                    b.Property<int>("MinutesFreqToRepeat")
                        .HasColumnType("int");

                    b.Property<bool>("NotifyDocExpByApp")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyDocExpByEmail")
                        .HasColumnType("bit");

                    b.Property<bool>("NotifyDocExpByText")
                        .HasColumnType("bit");

                    b.HasKey("NotifyConfigurationId");

                    b.HasIndex("EmployerId");

                    b.ToTable("NotifyConfiguration");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Nurse", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("AgreeToApplicantStatement")
                        .HasColumnType("bit");

                    b.Property<bool?>("AgreeToNonDiscriminationDocument")
                        .HasColumnType("bit");

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<string>("AvailableHoursPerWeek")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvailableToWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CityId")
                        .HasColumnType("int");

                    b.Property<bool?>("ContactPresentEmployer")
                        .HasColumnType("bit");

                    b.Property<string>("ContactTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("CriminalActivity")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("DateAvailableToWork")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeviceType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmergencyContactRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirebaseToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("HoursPerWeek")
                        .HasColumnType("int");

                    b.Property<bool?>("IneligibleForParticipation")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInactive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUserAvailableForJob")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("LawfullyBecomingEmployed")
                        .HasColumnType("bit");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleInitial")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredHourlyRate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreferredHourlyRateUpto")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfliePicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForIneligible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForWork")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ReferralCount")
                        .HasColumnType("int");

                    b.Property<int?>("RegisteredCount")
                        .HasColumnType("int");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialSecurityNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StateId")
                        .HasColumnType("int");

                    b.Property<string>("StepsInformation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelephoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TotalRewards")
                        .HasColumnType("int");

                    b.Property<bool?>("Trasnportation")
                        .HasColumnType("bit");

                    b.Property<int?>("UpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("StateId");

                    b.ToTable("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NurseCnaSkills", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AccurateMaintainIntakeAndOutputAndDocuments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdaptCareToIncorporateNormalGrowthAndDevelopment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdaptMethodAndTerminologyOfPatients")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdministersEnemasInstructedBySupervisingNurse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Alzheimers")
                        .HasColumnType("float");

                    b.Property<string>("AmbulanceAssistance")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssistPatientPerformingTurnCoughAndDeepBreathingExercises")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AssistWithMealsAndSnacks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("AssistedLiving")
                        .HasColumnType("float");

                    b.Property<string>("BackRubs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Baths")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BloodPressureMeasurements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Cancer")
                        .HasColumnType("float");

                    b.Property<string>("CnaSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Dementia")
                        .HasColumnType("float");

                    b.Property<double?>("Diabetes")
                        .HasColumnType("float");

                    b.Property<string>("DistinguishesMeasurementReportedTo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EnsureSafeEnvironmentReflectingSpecificNeeds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedingTubesWithScopeOfCnaCertification")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FeedsPatientWithNormalSwallowingAbilities")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("HomeCare")
                        .HasColumnType("float");

                    b.Property<double?>("Hospice")
                        .HasColumnType("float");

                    b.Property<string>("MeasureHeightAndWeight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Medical")
                        .HasColumnType("float");

                    b.Property<string>("NailCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("NursingHome")
                        .HasColumnType("float");

                    b.Property<string>("OralAndNascalCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OralCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Other")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Parkinsons")
                        .HasColumnType("float");

                    b.Property<string>("Positioning")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PracticeOxygenSafety")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProperBodyMechanics")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProperUseOfHoyerLifts")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProperUseOfSpecialtyBeds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineCatheterCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoutineSkinCare")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Shampoo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Surgical")
                        .HasColumnType("float");

                    b.Property<string>("TemperaturePulseAndRespirationMeasurements")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferFromBedToChair")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransferFromChairToBed")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NurseId");

                    b.ToTable("NurseCnaSkills");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NurseComment", b =>
                {
                    b.Property<int>("NurseCommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AgencyResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("ResponseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("NurseCommentId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("NurseComment");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NurseInbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("NurseInbox");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Order", b =>
                {
                    b.Property<string>("OrderId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrderId");

                    b.HasIndex("EmployerId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Reference", b =>
                {
                    b.Property<int>("ReferenceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReferenceId");

                    b.HasIndex("NurseId");

                    b.ToTable("Reference");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Referral", b =>
                {
                    b.Property<int>("ReferralId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DateReferred")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateRegistered")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailSent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReferralLink")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReferralId");

                    b.HasIndex("NurseId");

                    b.ToTable("Referral");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Abbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResourceId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.ServiceAgreement", b =>
                {
                    b.Property<int>("ServiceAgreementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("CanAccessPersonalFunds")
                        .HasColumnType("bit");

                    b.Property<bool>("CanAccessPersonalVichle")
                        .HasColumnType("bit");

                    b.Property<string>("Condition1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Condition2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateBilledOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateDueOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("HasReceivedBillOfRights")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("InitialDateOfContact")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsInsurance")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMedicaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrivatePay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignedByAgency")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSignedByClient")
                        .HasColumnType("bit");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<int>("LeastNoOfDays1")
                        .HasColumnType("int");

                    b.Property<int>("LeastNoOfDays2")
                        .HasColumnType("int");

                    b.Property<int>("NoOfMonthAgreed")
                        .HasColumnType("int");

                    b.Property<string>("ReferredBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReferredDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SignedByAgency")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SignedByClient")
                        .HasColumnType("datetime2");

                    b.HasKey("ServiceAgreementId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.ToTable("ServiceAgreement");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.ServiceList", b =>
                {
                    b.Property<int>("ServiceListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServiceListId");

                    b.ToTable("ServiceList");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.State", b =>
                {
                    b.Property<int>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateId");

                    b.HasIndex("CountryId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.ToTable("Status");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Subscription", b =>
                {
                    b.Property<int>("SubscriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("SubscriptionLevel")
                        .HasColumnType("int");

                    b.HasKey("SubscriptionId");

                    b.ToTable("Subscription");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.SupervisoryVisit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CommunicatesWithPt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompilesWithInfection")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("Details")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FollowingPoc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("HonorsPatientRights")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PatientCompatible")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientNotifiedOfChange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PocChanged")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffPersonInHome")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupervisoryVisitInfo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("SupervisoryVisit");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskList", b =>
                {
                    b.Property<int>("TaskListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EndTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("StartTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TaskStatus")
                        .HasColumnType("bit");

                    b.Property<string>("TotalTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VisitNoteId")
                        .HasColumnType("int");

                    b.HasKey("TaskListId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.HasIndex("VisitNoteId");

                    b.ToTable("TaskList");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskListCategory", b =>
                {
                    b.Property<int>("TaskListCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Category")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskListCategoryId");

                    b.ToTable("TaskListCategory");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskListTemplate", b =>
                {
                    b.Property<int>("TaskListTemplateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TaskListCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TaskName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskListTemplateId");

                    b.HasIndex("TaskListCategoryId");

                    b.ToTable("TaskListTemplate");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskListVerification", b =>
                {
                    b.Property<int>("TaskListVerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("Latitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Longitude")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NurseSignature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Signature")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TaskVerifiedTime")
                        .HasColumnType("datetime2");

                    b.HasKey("TaskListVerificationId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("TaskListVerification");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.UploadDocuments", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BackgroundCheck")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BackgroundCheckExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CnaExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CnaOrProfessionalLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CprExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CprProvideNewLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DrivingLicenseExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EVerifyWillPulled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EVerifyWillPulledExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HiringDisclosures")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HiringDisclosuresExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HiringPreScreening")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("HiringPreScreeningExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("OfficeWillPulled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OfficeWillPulledExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PcaTest")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PcaTestExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SexOffenderReportOfficeWillPulled")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SexOffenderReportOfficeWillPulledExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ssn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("SsnExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("StaffPortalExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StaffPortalInfo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TbTestResults")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TbTestResultsExpiryDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.VisitNote", b =>
                {
                    b.Property<int>("VisitNoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BillingCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CareRecipientId")
                        .HasColumnType("int");

                    b.Property<bool>("CheckBloodPressure")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckPainRating")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckTemperature")
                        .HasColumnType("bit");

                    b.Property<bool>("CheckWeight")
                        .HasColumnType("bit");

                    b.Property<string>("EmployerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("TimeIn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("TimeOut")
                        .HasColumnType("datetime2");

                    b.HasKey("VisitNoteId");

                    b.HasIndex("CareRecipientId");

                    b.HasIndex("EmployerId");

                    b.HasIndex("JobId");

                    b.HasIndex("NurseId");

                    b.ToTable("VisitNote");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.WorkExperience", b =>
                {
                    b.Property<int>("WorkExperienceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Employer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FinalHourlyRate")
                        .HasColumnType("float");

                    b.Property<double?>("HourlyRate")
                        .HasColumnType("float");

                    b.Property<bool>("IsContactAllowed")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NameOfSupervisor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NurseId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PhoneNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReasonForLeaving")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("YourDuties")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("WorkExperienceId");

                    b.HasIndex("NurseId");

                    b.ToTable("WorkExperience");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Wound", b =>
                {
                    b.Property<int>("WoundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AdditionalComments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdultAssessmentId")
                        .HasColumnType("int");

                    b.Property<string>("BedTissue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CleansedWith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoveredWith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Depth")
                        .HasColumnType("float");

                    b.Property<string>("DrainageAmount")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrainageOdor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DrainageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DressedWith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMattressPressureRefiefDevice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsNotDueToday")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOtherPressureRefiefDevice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOverlayPressureRefiefDevice")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSTIsOther")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeeWoundAddendum")
                        .HasColumnType("bit");

                    b.Property<bool>("IsWCCushionPressureRefiefDevice")
                        .HasColumnType("bit");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPWTContOrIntermittent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NPWTIsBlack")
                        .HasColumnType("bit");

                    b.Property<bool>("NPWTIsCanisterChange")
                        .HasColumnType("bit");

                    b.Property<bool>("NPWTIsFoam")
                        .HasColumnType("bit");

                    b.Property<bool>("NPWTIsGreen")
                        .HasColumnType("bit");

                    b.Property<bool>("NPWTIsWhite")
                        .HasColumnType("bit");

                    b.Property<string>("NPWTPeriwound")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPWTPiece")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPWTPressure")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NPWTWoundBed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OtherPressureRefiefDevice")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PackedWith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientResponse")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("STIsBlack")
                        .HasColumnType("bit");

                    b.Property<bool>("STIsBlanched")
                        .HasColumnType("bit");

                    b.Property<bool>("STIsCool")
                        .HasColumnType("bit");

                    b.Property<bool>("STIsEdema")
                        .HasColumnType("bit");

                    b.Property<bool>("STIsNormal")
                        .HasColumnType("bit");

                    b.Property<string>("STIsOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("STIsPale")
                        .HasColumnType("bit");

                    b.Property<bool>("STIsPurple")
                        .HasColumnType("bit");

                    b.Property<bool>("STIsRed")
                        .HasColumnType("bit");

                    b.Property<bool>("STIsShiny")
                        .HasColumnType("bit");

                    b.Property<bool>("STIsWarm")
                        .HasColumnType("bit");

                    b.Property<string>("SecuredWith")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SorroundingTissue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Square")
                        .HasColumnType("float");

                    b.Property<string>("Stage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tunneling")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Undermining")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("WBTIsBloody")
                        .HasColumnType("bit");

                    b.Property<bool>("WBTIsEschar")
                        .HasColumnType("bit");

                    b.Property<bool>("WBTIsGranular")
                        .HasColumnType("bit");

                    b.Property<bool>("WBTIsHealthy")
                        .HasColumnType("bit");

                    b.Property<bool>("WBTIsNecrotic")
                        .HasColumnType("bit");

                    b.Property<bool>("WBTIsOther")
                        .HasColumnType("bit");

                    b.Property<bool>("WBTIsSloughing")
                        .HasColumnType("bit");

                    b.Property<bool>("WBTIsWeeping")
                        .HasColumnType("bit");

                    b.Property<string>("WBTOther")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.Property<string>("WoundBedColor")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WoundNumber")
                        .HasColumnType("int");

                    b.HasKey("WoundId");

                    b.HasIndex("AdultAssessmentId");

                    b.ToTable("Wound");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("EmployerNurse", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", null)
                        .WithMany()
                        .HasForeignKey("EmployersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", null)
                        .WithMany()
                        .HasForeignKey("NursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.AdultAssessment", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany("AdultAssessments")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.AgencyServedCounties", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany("AgencyServedCounties")
                        .HasForeignKey("EmployerId");

                    b.Navigation("County");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.AgencyTaskList", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.TaskListTemplate", "TaskListTemplate")
                        .WithMany()
                        .HasForeignKey("TaskListTemplateId");

                    b.Navigation("Employer");

                    b.Navigation("TaskListTemplate");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.BuyCourses", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareCoordinationNote", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipient", null)
                        .WithMany("CareCoordinationNotes")
                        .HasForeignKey("CareRecipientId");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CarePlan", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany("CarePlans")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipient", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipientLocation", "CareRecipientLocation")
                        .WithMany()
                        .HasForeignKey("CareRecipientLocationId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipientRelationship", "CareRecipientRelationship")
                        .WithMany()
                        .HasForeignKey("CareRecipientRelationshipId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Client", "Client")
                        .WithMany("CareRecipients")
                        .HasForeignKey("ClientId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.ServiceList", "ServiceList")
                        .WithMany("CareRecipients")
                        .HasForeignKey("ServiceListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("CareRecipientLocation");

                    b.Navigation("CareRecipientRelationship");

                    b.Navigation("City");

                    b.Navigation("Client");

                    b.Navigation("ServiceList");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Certification", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany("Certifications")
                        .HasForeignKey("NurseId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("Nurse");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.City", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.County", "County")
                        .WithMany()
                        .HasForeignKey("CountyId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("County");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Client", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipientRelationship", "CareRecipientRelationship")
                        .WithMany("Clients")
                        .HasForeignKey("CareRecipientRelationshipId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.City", "City")
                        .WithMany("Clients")
                        .HasForeignKey("CityId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany("Clients")
                        .HasForeignKey("StateId");

                    b.Navigation("CareRecipientRelationship");

                    b.Navigation("City");

                    b.Navigation("IdentityUser");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.County", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Diagnosis", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.AdultAssessment", "AdultAssessment")
                        .WithMany("Diagnosis")
                        .HasForeignKey("AdultAssessmentId");

                    b.Navigation("AdultAssessment");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.DischargeSummary", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany("DischargeSummaries")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Education", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.EducationType", "EducationType")
                        .WithMany("Education")
                        .HasForeignKey("EducationTypeId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany("Educations")
                        .HasForeignKey("NurseId");

                    b.Navigation("EducationType");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Employer", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Subscription", "Subscription")
                        .WithMany()
                        .HasForeignKey("SubscriptionId");

                    b.Navigation("City");

                    b.Navigation("State");

                    b.Navigation("Subscription");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.HiringAgreements", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.InOutTime", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany("InOutTimes")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Job");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Job", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipient", "CareRecipient")
                        .WithMany()
                        .HasForeignKey("CareRecipientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.JobTitle", "JobTitle")
                        .WithMany()
                        .HasForeignKey("JobTitleId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("CareRecipient");

                    b.Navigation("Client");

                    b.Navigation("Employer");

                    b.Navigation("JobTitle");

                    b.Navigation("Resource");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.JobApply", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany("JobApplies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Job");

                    b.Navigation("Nurse");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.JobApplyForAgency", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany("JobApplyForAgencies")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NotifyConfiguration", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Nurse", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "IdentityUser")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId");

                    b.Navigation("City");

                    b.Navigation("IdentityUser");

                    b.Navigation("State");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NurseCnaSkills", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NurseComment", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.NurseInbox", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Order", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.Navigation("Employer");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Reference", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany("References")
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Referral", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.ServiceAgreement", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employer");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.State", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.SupervisoryVisit", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany("SupervisoryVisits")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskList", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany()
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany("TaskList")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.VisitNote", "VisitNote")
                        .WithMany("TaskLists")
                        .HasForeignKey("VisitNoteId");

                    b.Navigation("Employer");

                    b.Navigation("Job");

                    b.Navigation("Nurse");

                    b.Navigation("VisitNote");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskListTemplate", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.TaskListCategory", "TaskListCategory")
                        .WithMany()
                        .HasForeignKey("TaskListCategoryId");

                    b.Navigation("TaskListCategory");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.TaskListVerification", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", "Job")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("NurseId");

                    b.Navigation("Job");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.UploadDocuments", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.VisitNote", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.CareRecipient", null)
                        .WithMany("VisitNotes")
                        .HasForeignKey("CareRecipientId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Employer", "Employer")
                        .WithMany("VisitNotes")
                        .HasForeignKey("EmployerId");

                    b.HasOne("GaHealthcareNurses.Entity.Models.Job", null)
                        .WithMany("VisitNotes")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany("VisitNotes")
                        .HasForeignKey("NurseId");

                    b.Navigation("Employer");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.WorkExperience", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.Nurse", "Nurse")
                        .WithMany("WorkExperiences")
                        .HasForeignKey("NurseId");

                    b.Navigation("Nurse");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Wound", b =>
                {
                    b.HasOne("GaHealthcareNurses.Entity.Models.AdultAssessment", "AdultAssessment")
                        .WithMany("Wound")
                        .HasForeignKey("AdultAssessmentId");

                    b.Navigation("AdultAssessment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.AdultAssessment", b =>
                {
                    b.Navigation("Diagnosis");

                    b.Navigation("Wound");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipient", b =>
                {
                    b.Navigation("CareCoordinationNotes");

                    b.Navigation("VisitNotes");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.CareRecipientRelationship", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.City", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Client", b =>
                {
                    b.Navigation("CareRecipients");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.EducationType", b =>
                {
                    b.Navigation("Education");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Employer", b =>
                {
                    b.Navigation("AgencyServedCounties");

                    b.Navigation("VisitNotes");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Job", b =>
                {
                    b.Navigation("AdultAssessments");

                    b.Navigation("CarePlans");

                    b.Navigation("DischargeSummaries");

                    b.Navigation("InOutTimes");

                    b.Navigation("JobApplies");

                    b.Navigation("JobApplyForAgencies");

                    b.Navigation("SupervisoryVisits");

                    b.Navigation("TaskList");

                    b.Navigation("VisitNotes");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.Nurse", b =>
                {
                    b.Navigation("Certifications");

                    b.Navigation("Educations");

                    b.Navigation("References");

                    b.Navigation("VisitNotes");

                    b.Navigation("WorkExperiences");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.ServiceList", b =>
                {
                    b.Navigation("CareRecipients");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.State", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Clients");
                });

            modelBuilder.Entity("GaHealthcareNurses.Entity.Models.VisitNote", b =>
                {
                    b.Navigation("TaskLists");
                });
#pragma warning restore 612, 618
        }
    }
}
